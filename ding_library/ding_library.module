<?php
/**
 * @file
 * Provides the library node type for the Ding! project.
 */

/**
 * Implementation of hook_menu().
 */
function ding_library_menu() {
  $items = array();

  $items['admin/settings/ding_library'] = array(
    'title' => 'Library settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_library_admin_settings_main_form'),
    'access arguments' => array('configure libraries'),
    'file' => 'ding_library.admin.inc',
    'weight' => -10,
  );

  $items['admin/settings/ding_library/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('configure libraries'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ding_library.admin.inc',
    'weight' => -10,
  );

  $items['admin/settings/ding_library/order'] = array(
    'title' => 'Ordering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_library_admin_ordering_form'),
    'access arguments' => array('configure libraries'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_library.admin.inc',
  );

  // Since we switched the library URLs to be node/%/something, we need
  // to redirect the old ones that might not be covered by URL aliases.
  $items['biblioteker/%'] = array(
    'title' => 'Redirect from old library URLs',
    'page callback' => 'ding_library_legacy_redirect_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ding_library.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ding_library_perm() {
  return array(
    'configure libraries',
  );
}

/**
 * Implementation of hook_cron().
 */
function ding_library_cron() {
  // Check if the nightly cron job has run for the current day.
  if (date('Ymd', variable_get('ding_library_nightly_cron', 0)) != date('Ymd', $_SERVER['REQUEST_TIME']) &&
      lock_acquire('ding_library_nightly_cron', 600.0)) {

    rules_invoke_event('ding_library_nightly_cron');

    // Store the time the job was done to prevent it from running again
    // before the next day.
    variable_set('ding_library_nightly_cron', time());
    lock_release('ding_library_nightly_cron');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ding_library_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'library_node_form') {
    // Hide the comment settings form and disable comments.
    unset($form['comment_settings']);
    $form['comment'] = array(
      '#type' => 'value',
      '#value' => 0,
    );

    // Don't display menu settings and attachments.
    unset($form['attachments']);
    unset($form['menu']);

    // Hide the revision settings and never allow creating new versions
    unset($form['revision_information']);
    $form['revision'] = array(
      '#type' => 'value',
      '#value' => FALSE,
    );

    // HACK: Prevent users from deleting library location.
    drupal_add_js('jQuery(document).ready(function() {Â jQuery("#edit-locations-0-delete-location-wrapper").hide(); });', 'inline');

    // Add library settings.
    $form['library_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Library settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('configure libraries'),
    );

    $node = $form['#node'];
    $form['library_settings']['library_page_type'] = array(
      '#type' => 'radios',
      '#title' => t('Library type'),
      '#options' => array(
        'normal' => t('Normal library page'),
        'portal' => t('Portal-style library page'),
      ),
      '#description' => t('Normal library pages has a blog section, events, and similar, while portal-style library pages have only a hierarchial menu with content.'),
      '#default_value' => (isset($node->library_page_type)) ? $node->library_page_type : 'normal',
    );

    $form['library_settings']['library_show_on_map'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show library on map'),
      '#default_value' => (isset($node->library_show_on_map)) ? $node->library_show_on_map : 1,
    );

    $branches = ding_provider_invoke('branch', 'list');
    if (count($branches) > 0) {
      $form['library_settings']['branch_id'] = array(
        '#type' => 'select',
        '#title' => t('DDELibra branch'),
        '#default_value' => (isset($node->branch_id)) ? $node->branch_id : NULL,
        '#options' => $branches,
      );
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function ding_library_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'load':
      if ($node->type == 'library') {
        $additions = db_fetch_array(db_query('SELECT * FROM {ding_library} WHERE vid = %d', $node->vid));
        unset($additions['vid']);
        unset($additions['nid']);

        return $additions;
      }
      break;
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {ding_library} WHERE vid = %d', $node->vid);
      break;
    case 'delete':
      db_query('DELETE FROM {ding_library} WHERE nid = %d', $node->nid);
      break;
    case 'insert':
      if ($node->type == 'library') {
        drupal_write_record('ding_library', $node);

        // Create a menu for hierarchial navigation for portal sites.
        if ($node->library_page_type == 'portal') {
          _ding_library_portal_menu($node, FALSE);
        }
      }
      break;
    case 'update':
      if ($node->type == 'library') {
        // Check if theres an existing row in {ding_library}
        $prev_vid = db_result(db_query("SELECT vid FROM {ding_library} WHERE nid=%d", $node->nid));
        // If this is a new node or we're adding a new revision,
        if ($node->revision || !$prev_vid) {
          drupal_write_record('ding_library', $node);

          // Create a menu for hierarchial navigation for portal sites.
          if ($node->library_page_type == 'portal') {
            _ding_library_portal_menu($node, FALSE);
          }
        }
        else {
          drupal_write_record('ding_library', $node, array('nid', 'vid'));
          if (empty($node->branch_id)) {
            // drupal_write_record() does not support updating a column to NULL.
            db_query('UPDATE {ding_library} SET branch_id = NULL WHERE nid = %d AND vid = %d', $node->nid, $node->vid);
          }

          if ($node->library_page_type == 'portal') {
            // Check if this library already has a menu.
            if (db_result(db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = 'ding_library_%d' LIMIT 1", $node->nid))) {
              // If so, update the menu with the new name (if any).
              _ding_library_portal_menu($node);
            }
            // Otherwise, create a new menu.
            else {
              drupal_write_record('menu_custom', $menu);
              _ding_library_portal_menu($node, FALSE);
            }
          }
        }
      }
      break;
    case 'view':
      if ($node->type == 'library') {
        if (!($a3 && $a4)) {
          drupal_add_js(drupal_get_path('module', 'ding_library') . '/ding_library.status.js');
          drupal_add_js(array('dingLibraryNids' => array($node->nid)), 'setting');
        }
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_library_theme() {
  $items = array();
  $items['ding_library_admin_ordering_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'ding_library.admin.inc',
  );
  return $items;
}

/**
 * A theme preprocess function to inject the library name onto node objects.
 */
function ding_library_preprocess_node(&$vars) {
  if ($vars['node']->type != 'library' && isset($vars['node']->field_library_ref[0]['nid']) && $vars['node']->field_library_ref[0]['nid'] > 0) {
    // Fetch the library name, since it's needed for theming.
    $vars['node']->library_name = check_plain(db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $vars['node']->field_library_ref[0]['nid'])));
  }
}

/**
 * Implementation of hook_rules_event_info().
 * @ingroup rules
 */
function ding_library_rules_event_info() {
  return array(
    'ding_library_nightly_cron' => array(
      'label' => t('When Ding! library nightly cron runs'),
      'module' => 'Ding! library',
      'arguments' => array(),
    ),
  );
}

/**
 * Implementation of hook_requirements().
 */
function ding_library_requirements($phase) {
  $requrements = array();

  if ($phase == 'runtime') {
    if (!function_exists('ding_provider_description')) {
      $requrements['ding_library'] = array(
        'title' => t('Ding Library'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('Ding provider module not enabled.'),
      );
    }
    else {
      $branch_provider = ding_provider_description('branch');

      $requrements['ding_library'] = array(
        'title' => t('Ding branch'),
        'severity' => $branch_provider ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
        'value' => $branch_provider,
        'description' => $branch_provider ? t('OK'): t('No branch provider active.'),
      );
    }
  }

  return $requrements;
}

/**
 * Create or update a library portal page menu.
 *
 * @param object $node
 *    The library node.
 * @param boolean $update
 *    Whether to update or create menu.
 */
function _ding_library_portal_menu($node, $update = TRUE) {
  $menu = array(
    'menu_name' => 'ding_library_' . $node->nid,
    'title' => $node->title,
    'description' => t('Navigation menu for %library.', array('%library' => $node->title)),
  );
  if ($update) {
    drupal_write_record('menu_custom', $menu, array('menu_name'));
  }
  else {
    drupal_write_record('menu_custom', $menu);

    // When creating a menu, insert it into the allowed menus for the
    // page content type.
    $setting = variable_get('page_menu_settings', array());
    $setting[$menu['menu_name']] = $menu['menu_name'];
    variable_set('page_menu_settings', $setting);
  }
}

/**
 * Implementation of hook_token_list().
 */
function ding_library_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'node' || $type == 'all') {
    if (function_exists('ding_user_user')) {
      $tokens['user']['ding_user_display_name'] = t('Node author display name');
      $tokens['user']['ding_user_display_name_raw'] = t('Node author display name (unfiltered)');
    }
  }
  elseif (($type == 'user' || $type == 'all') && function_exists('ding_user_user')) {
    $tokens['user']['ding_user_display_name'] = t('User display name');
    $tokens['user']['ding_user_display_name_raw'] = t('User display name (unfiltered)');
  }

  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function ding_library_token_values($type, $object = NULL, $options = array()) {
  $tokens = array();
  if ($type == 'node') {
    $node = $object;

    if (function_exists('ding_user_user')) {
      $account = user_load($node->uid);

      if ($account && !empty($account->display_name)) {
        $name = $account->display_name;
      }
      else {
        $name = $node->name;
      }

      $tokens['ding_user_display_name'] = check_plain($name);
      $tokens['ding_user_display_name_raw'] = $name;
    }
  }
  elseif ($type == 'user') {
    $account = user_load($object->uid);
    if ($account && !empty($account->display_name)) {
      $name = $account->display_name;
    }
    else {
      $name = $account->name;
    }

    $tokens['ding_user_display_name'] = check_plain($name);
    $tokens['ding_user_display_name_raw'] = $name;
  }

  return $tokens;
}

include_once('ding_library.features.inc');

