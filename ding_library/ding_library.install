<?php
/**
 * @file
 * Installation and upgrade hooks for the ding_library module.
 */

/**
 * Implementation of hook_install().
 */
function ding_library_install() {
  drupal_install_schema('ding_library');
}

/**
 * Implementation of hook_uninstall().
 */
function ding_library_uninstall() {
  drupal_uninstall_schema('ding_library');
}

/**
 * Implementation of hook_schema().
 */
function ding_library_schema() {
  $schema['ding_library'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => '{node}.vid for node',
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => '{node}.nid for node',
      ),
      'branch_id' => array(
        'type' => 'varchar',
        'length' => 50,
        'description' => 'Branch ID in Alma/DDELibra',
      ),
      'slug' => array(
        'type' => 'varchar',
        'length' => 20,
        'description' => 'Short, URL-safe name of library, used as URL prefix',
      ),
      'library_page_type' => array(
        'type' => 'varchar',
        'length' => 50,
        'default' => 'normal',
        'description' => 'Library page type',
      ),
      'library_weight' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Library weight. Determines ordering',
      ),
      'library_show_on_map' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Whether this library should be shown on the library map',
      ),
    ),
    'primary key' => array('vid', 'nid'),
    'indexes' => array(
      'nid' => array('nid'),
      'branch_id' => array('branch_id'),
      'library_weight' => array('library_weight'),
      'library_show_on_map' => array('library_show_on_map'),
    ),
  );
  return $schema;
}

/**
 * Second update, add two new fields and their indexes.
 */
function ding_library_update_6002() {
  $ret = array();

  db_add_field($ret, 'ding_library', 'library_weight', array(
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ), array('indexes' => array('library_weight' => array('library_weight'))));

  db_add_field($ret, 'ding_library', 'library_show_on_map', array(
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 1,
    ), array('indexes' => array('library_show_on_map' => array('library_show_on_map'))));
  return $ret;
}

/**
 * Third update, add branch_id field.
 */
function ding_library_update_6003() {
  $ret = array();

  db_add_field($ret, 'ding_library', 'branch_id', array(
    'type' => 'varchar',
    'length' => 50,
    'description' => 'Branch ID in Alma/DDELibra',
  ), array('unique keys' => array('branch_id' => array('branch_id'))));

  return $ret;
}

/**
 * Add slug field in the library table, drop the old table.
 */
function ding_library_update_6004() {
  $ret = array();

  db_add_field($ret, 'ding_library', 'slug', array(
    'type' => 'varchar',
    'length' => 20,
  ), array('unique keys' => array('slug' => array('slug'))));

  $query = db_query('SELECT * FROM {ding_slug}');

  while ($row = db_fetch_array($query)) {
    $ret[] = update_sql("UPDATE IGNORE {ding_library} SET slug = '{$row['slug']}' WHERE nid = {$row['nid']}");
  }

  $ret[] = update_sql('DROP TABLE {ding_slug}');

  return $ret;
}

/**
 * Install PURL.
 */
function ding_library_update_6005() {
  $ret = array();

  // Start out with installing PURL.
  drupal_install_modules(array('purl'));
  $modules = module_list();
  if (!isset($modules['purl'])) {
    return array('#abort' => array('success' => FALSE, 'query' => 'Could not enable PURL.'));
  }
  $ret[] = array('success' => TRUE, 'query' => 'Enabled PURL successfully.');

  return $ret;
}

/**
 * Change slugs to be handled by PURL.
 */
function ding_library_update_6006() {
  $ret = array();

  // Select the existing slugs.
  // INNER JOIN on vid to get only the current slugs.
  $query = db_query("
    SELECT n.nid, dl.slug FROM {ding_library} AS dl
    INNER JOIN {node} AS n USING (vid)
    WHERE slug IS NOT NULL;
  ");

  // Save the slugs as PURLs.
  while ($row = db_fetch_array($query)) {
    $ret[] = update_sql("INSERT INTO {purl} (value, provider, id) VALUES ('" . $row['slug'] . "', 'ding_library', " . $row['nid'] . ");");
  }

  // Drop the slug column.
  db_drop_field($ret, 'ding_library', 'slug');

  // Delete columns that have vid=0 â€“ those are broken values.
  $ret[] = update_sql('DELETE FROM {ding_library} WHERE vid = 0;');

  return $ret;
}

/**
 * Change branch_id index to non-unique.
 */
function ding_library_update_6007() {
  $ret = array();
  db_drop_index($ret, 'ding_library', 'branch_id');
  db_add_index($ret, 'ding_library', 'branch_id', array('branch_id'));
  return $ret;
}

/**
 * Enable panels_subsites.
 */
function ding_library_update_6008() {
  module_disable(array('purl'));
  drupal_install_modules(array('panels_subsites'));
}


/**
 * Migrate from our old slugs to panels_subsites.
 */
function ding_library_update_6009() {
  $old_slugs = db_query('
    SELECT p.id AS nid, p.value AS slug, n.type AS node_type
    FROM purl AS p
    INNER JOIN node AS n ON (n.nid = p.id)
  ');

  while ($row = db_fetch_object($old_slugs)) {
    drupal_write_record('panels_subsites_slugs', $row);
  }
}

/**
 * Disable the PURL module, since it's no longer needed.
 */
function ding_library_update_6010() {
  // Get rid of the PURL modules.
  drupal_uninstall_module('purl_test');
  drupal_uninstall_module('purl');
}

