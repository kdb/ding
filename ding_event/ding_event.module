<?php
/**
 * @file
 * Module for handling event nodes.
 *
 * Implements similar events, KultuNaut feeds, etc.
 */

/**
 * Implementation of hook_menu().
 */
function ding_event_menu() {
  $items = array();

  $items['kultunaut_export'] = array(
    'title' => 'KultuNaut event feed',
    'page callback' => 'ding_event_pages_kultunaut_feed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ding_event.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function ding_event_cron() {
  $timestamp = variable_get('ding_event_similar_data_generated', 0);
  // If the data was not generated today, regenerate it.
  // This approach helps avoid race conditions when using a cache expiry
  // time, since the cache will be refilled only by the cron job.
  if (date('Ymd', $timestamp) != date('Ymd', $_SERVER['REQUEST_TIME']) &&
      lock_acquire('ding_event_similar_data_generated', 600.0)) {
    ding_event_similar_data(TRUE);
    lock_release('ding_event_similar_data_generated');
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_event_theme() {
  return array(
    'ding_event_similar_events' => array(
      'arguments' => array('event_nids' => NULL),
      'template' => 'ding_event_similar_events',
    ),
    'ding_event_kultunaut_feed' => array(
      'arguments' => array('feed' => NULL),
      'template' => 'ding_event_kultunaut_feed',
    ),
    'ding_event_kultunaut_activity' => array(
      'arguments' => array('node' => NULL),
      'template' => 'ding_event_kultunaut_activity',
    ),
  );
}

/**
 * Implementation of hook_views_pre_render().
 */
function ding_event_views_pre_render(&$view) {
  // When the event list is being displayed on a library page...
  if ($view->name == 'event_list' && $view->current_display == 'panel_pane_2') {
    // Generate link to the library's event page.
    $url = url('node/' . $view->args[0] . '/arrangementer');

    // Replace the URL in the more link to point at the library's event
    // page instead of the global one.
    $view->display_handler->options['footer'] = preg_replace(
      '/href="[^"]+" class="more-link"/',
      'href="' . $url . '" class="more-link"/',
      $view->display_handler->options['footer'], 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_event_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Similar events data.
 *
 * @param boolean $reset
 *    If TRUE, regenerate the cached similar events data.
 * @return array
 *    Array of event-related data.
 */
function ding_event_similar_data($reset = FALSE) {
  static $data;
  if (!isset($data) || $reset) {
    if (!$reset && ($cache = cache_get('ding_event_similar_data')) && !empty($cache->data)) {
      $data = unserialize($cache->data);
    }
    else {
      module_load_include('similar_data.inc', 'ding_event');
      $data = ding_event_similar_data_generate();
      cache_set('ding_event_similar_data', serialize($data));
      // Store the timestamp for when this data was generated.
      // Used to trigger cron regenerating the data.
      variable_set('ding_event_similar_data_generated', $_SERVER['REQUEST_TIME']);
    }
  }
  return $data;
}

/**
 * Find similar events for a node.
 *
 * @param object $node
 *    The event node to find similar events for.
 * @param integer $count
 *    The number of similar events to find. Default 5, 0 for unlimited.
 * @return array
 *    Array of node IDs for similar events.
 */
function ding_event_get_similar($node, $count = 5) {
  if ($node->type != 'event') {
    return array();
  }

  $data = ding_event_similar_data();
  $events = array();

  // Take all the available events and assign them a score.
  // The first 10 in the list get a slight boost, since they happen soonest.
  $boost = 10;
  foreach ($data['events'] as $nid) {
    if ($boost > 0) {
      $events[$nid] = $boost / 3;
      $boost--;
    }
    else {
      $events[$nid] = 0;
    }
  }

  // Boost all events with the same taxonomy terms.
  foreach ($node->taxonomy as $term) {
    // Skip this term if we don't have similar term data for it.
    if (!is_array($data['terms'][$term->tid])) {
      continue;
    }

    foreach ($data['terms'][$term->tid] as $nid) {
      $events[$nid] += 2;
    }
  }

  // Boost events that happen on the same library.
  foreach ($node->field_library_ref as $ref) {
    if (isset($data['libraries'][$ref['nid']])) {
      foreach ($data['libraries'][$ref['nid']] as $nid) {
        $events[$nid] += 4;
      }
    }
  }

  // Sort the events by score
  arsort($events, SORT_NUMERIC);

  // Remove the current node from the list
  unset($events[$node->nid]);

  // If there is a count set, return the top $count events.
  if ($count > 0) {
    return array_keys(array_slice($events, 0, $count, TRUE));
  }
  return array_keys($events);
}

/**
 * Preprocess variables for the node template.
 */
function ding_event_preprocess_node(&$vars) {
  if ($vars['type'] == 'event') {
    $variables['past_event'] = FALSE;
    $start = strtotime($vars['field_datetime'][0]['value'] . 'Z');
    $end = strtotime($vars['field_datetime'][0]['value2'] . 'Z');

    // If no end time is set, use the start time for comparison.
    if (2 > $end) {
      $end = $start;
    }

    // Find out the end time of the event. If there's no specified end
    // time, weâ€™ll use the start time. If the event is in the past, we
    // create the alert box.
    if (($end > 0 && format_date($end, 'custom', 'Ymd') < format_date($_SERVER['REQUEST_TIME'], 'custom', 'Ymd'))) {
      $vars['past_event'] = TRUE;
    }
  }
}

/**
 * Variable preprocessing for the ding_event_similar_events template.
 */
function ding_event_preprocess_ding_event_similar_events($variables) {
  $variables['events'] = array();
  // Load the node for each event, so Morten can theme them :)
  foreach ($variables['event_nids'] as $nid) {
    $variables['events'][$nid] = node_load($nid);
  }
}

function ding_event_preprocess_views_view_fields(&$vars) {
  if ($vars['view']->name == 'event_list' and isset($vars['fields']['field_datetime_value'])) {
    $vars['is_today'] = date_format_date(date_make_date($vars['fields']['field_datetime_value']->raw), 'custom', 'Ymd') == date('Ymd') ? 'today' : '';
  }
}

include_once('ding_event.features.inc');
