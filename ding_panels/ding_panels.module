<?php

/**
 * @file
 * Panels plugins for the Ding project.
 */

/**
 * Implementation of hook_theme().
 */
function ding_panels_theme($existing, $type, $theme, $path) {
  return array(
    'ding_panels_content_library_title' => array(
      'arguments' => array('node' => NULL, 'conf' => NULL),
      'template' => 'ding_panels_content_library_title',
    ),
    'ding_panels_content_library_location' => array(
      'arguments' => array('node' => NULL),
      'template' => 'ding_panels_content_library_location',
    ),
    'ding_panels_library_portal_title' => array(
      'arguments' => array('node' => NULL),
    ),
    'ding_panels_library_user_staff_title' => array(
      'arguments' => array('user' => NULL),
      'template' => 'ding_panels_library_user_staff_title',
    ),
    'ding_panels_content_library_pc_booking' => array(
      'arguments' => array('node' => NULL),
      'template' => 'ding_panels_content_library_pc_booking',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_panels_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell panels that our styles are fresh, so it doesn't need to go
 * into legacy mode.
 */
function ding_panels_ctools_plugin_api($module, $api) {
  if ($module == 'panels' && $api == 'styles') {
    return array('version' => 2);
  }
}

/**
 * Preprocess hook for the library title and navigation pane.
 */
function template_preprocess_ding_panels_content_library_title(&$variables) {
  $node = $variables['node'];

  // If header image is enabled, render it.
  if ($variables['conf']['display_header_image'] &&
      $variables['conf']['header_image_imagecache_preset'] &&
      $node->field_image['0']['filepath']) {
    $variables['header_image'] = theme('imagecache', $variables['conf']['header_image_imagecache_preset'], $node->field_image['0']['filepath']);
  }

  // Store the base_url so overriding preprocessors can use it.
  $base_url = $variables['base_url'] = 'node/' . $node->nid;

  $variables['library_title'] = l($node->title, $base_url);

  if ($variables['conf']['display_navigation_links']) {
    $variables['library_links'] = _ding_panels_content_theme_library_title_navigation($node, $base_url);
    $variables['library_navigation'] = theme('item_list', $variables['library_links']);
  }
}

/**
 * Helper function to generate the links below the library name.
 */
function _ding_panels_content_theme_library_title_navigation($node, $base_url) {
  $links = array();
  if ($node->type == 'library') {
    $links['blog'] = l(t('Blog'), $base_url . '/blog');
    $links['events'] = l(t('Events'), $base_url . '/arrangementer');
    $links['facilities'] = l(t('Facilities'), $base_url . '/faciliteter');

    if ($node->field_pc_booking_url[0]['value']) {
      if ($node->field_pc_booking_method[0]['value'] == 'popup') {
        $links['pc_booking'] = l(t('Book PC'), $node->field_pc_booking_url[0]['value'], array('attributes' => array('target' => '_blank')));
      }
      else {
        $links['pc_booking'] = l(t('Book PC'), $base_url . '/bookpc');
      }
    }

    $links['about'] = l(t('About the library'), $base_url . '/om');

    // The "Local" page only contains a list of topics, so only show it if
    // there is at least one topic related to this library.
    $view = views_get_view('topic_list');
    $view->set_arguments(array($node->nid));
    $view->set_items_per_page(1);
    $view->execute();
    if ($view->result) {
      $links['local'] = l(t('Local'), $base_url . '/lokalt');
    }
  }
  return $links;
}

/**
 * Preprocess hook for the library location.
 */
function template_preprocess_ding_panels_content_library_location(&$variables) {
  $node = $variables['node'];

  // Add a static Google map to the location information.
  if (function_exists('location_has_coordinates') && location_has_coordinates($node->location)) {
    $map_url = url('http://maps.google.com/maps/api/staticmap', array('query' => array(
      'zoom' => 14,
      'size' => '194x140',
      'markers' => $node->location['latitude'] . ',' . $node->location['longitude'],
      'sensor' => 'false',
    )));
    $variables['library_map'] = theme('image', _ding_panels_get_image($map_url), '', '', NULL, FALSE);
  }

  // Add links to the location, based on the ones defined on a node,
  // plus a few special ones.
  $links = array();
  foreach ($node->field_links as $delta => $link) {
    if (!$link['url']) {
      // Workaround for http://drupal.org/node/336426.
      continue;
    }

    $links[$delta] = $link;

    // Extract the domain name from the link, and add it as a class.
    // This will not work for sites which has a two-part ccTLD like
    // co.uk, but most web 2.0 services should work.
    $match = array();
    if (preg_match('/^\w+:\/\/[\w._-]+\.([\w-_]+)\.\w+\//', $link['url'], $match)) {
      $links[$delta]['attributes'] = array(
        'class' => $match[1],
      );
    }

    // theme_links expects the URL to be labelled 'href'
    $links[$delta]['href'] = $link['url'];
  }

  // Load the Danish location helpers.
  module_load_include('inc', 'location', 'supported/location.dk');
  // And add a link to Rejseplanen.
  $links[] = array(
    'title' => 'Rejseplanen',
    'href' => location_map_link_dk_rejseplanen($node->location),
    'attributes' => array('class' => 'rejseplanen'),
  );

  $variables['library_links'] = theme('links', $links);
}

/**
 * Theme function for library portal title.
 */
function theme_ding_panels_library_portal_title($node) {
  return '<h1>' . check_plain($node->title) . '</h1>';
}

/**
 * Preprocess function for the staff title.
 */
function template_preprocess_ding_panels_library_user_staff_title(&$variables) {
  // Generate list of links to the libraries the user is related to.
  $libs = array();
  if (isset($variables['user']->userreference['library'])) {
    foreach ($variables['user']->userreference['library'] as $nid => $title) {
      $libs[] = l($title, 'node/' . $nid);
    }
  }
  if (!empty($libs)) {
    $variables['related_libraries'] = theme('item_list', $libs);
  }
  else {
    $variables['related_libraries'] = '';
  }
}

/**
 * Utitlity function for caching remote images locally for 24 hours.
 *
 * @param $path the path to the image
 * @return string the local path for the image
 */
function _ding_panels_get_image($path) {
  $return = $path;

  $base_path = file_directory_path().'/ding_panels';
  file_check_directory($base_path, FILE_CREATE_DIRECTORY);

  $cut_path = str_ireplace("http://", "", $path);
  $image_name  = preg_replace("/[^\w]/", "-", $path);

  $image_path = $base_path."/".$image_name;
  if (file_exists($image_path) &&
    time() < (filectime($imagepath) + (60*60*24))) {
    // File already downloaded and within 24 hours cache lifetime
    $return = $image_path;
  } else {
    //Old or missing image so download it (again)
    $response = drupal_http_request($path);
    if ($response->data) {
      //This will replace any existing image
      file_put_contents($image_path, $response->data);
    }
    $return = $image_path;
  }

  return $return;
}
